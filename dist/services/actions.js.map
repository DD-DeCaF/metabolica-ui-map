{"version":3,"sources":["services/actions.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,IAAY,OAAO,WAAM,SAAS,CAAC,CAAA;AACnC,IAAY,CAAC,WAAM,QAAQ,CAAC,CAAA;AAI5B,mBAAmB;AACnB,6BAA6B;AAClB,mBAAW,GAAG,EAAE,CAAC;AAE5B,wBAA+B,WAAW;IACtC,IAAM,MAAM,GAAG,IAAI,WAAW,EAAE,CAAC;IACjC,mBAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AAC7B,CAAC;AAHe,sBAAc,iBAG7B,CAAA;AAED,IAAM,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC,6BAA6B,EAAE,EAAE,CAAC,CAAC;AAElE;IAGI,wBAAY,SAAwC;QAChD,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IAC/B,CAAC;IAEM,gCAAO,GAAd,UAAe,OAAsB;QACjC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,mBAAW,EAAE,UAAC,MAAM,IAAK,OAAA,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,EAA1B,CAA0B,CAAC,CAAC;IACzE,CAAC;IAEM,mCAAU,GAAjB,UAAkB,MAAM,EAAE,IAAY;QAClC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;IACxD,CAAC;IACL,qBAAC;AAAD,CAdA,AAcC,IAAA;AAdY,sBAAc,iBAc1B,CAAA;AAED,OAAO,CAAC,OAAO,CAAC,SAAS,EAAE,cAAc,CAAC,CAAC;AAE3C;IAAA;IAIA,CAAC;IAAD,aAAC;AAAD,CAJA,AAIC,IAAA;AAED;IAAsC,kCAAM;IAA5C;QAAsC,8BAAM;IAI5C,CAAC;IAHU,mCAAU,GAAjB,UAAkB,OAAO;QACrB,MAAM,CAAC,OAAO,CAAC,IAAI,KAAK,cAAc,CAAC;IAC3C,CAAC;IACL,qBAAC;AAAD,CAJA,AAIC,CAJqC,MAAM,GAI3C;AAGD;IAAuB,4BAAc;IAArC;QAAuB,8BAAc;QAC1B,UAAK,GAAG,UAAU,CAAC;IAO9B,CAAC;IAJG,YAAY;IACL,2BAAQ,GAAf,UAAgB,GAAe;IAE/B,CAAC;IARL;QAAC,cAAc;;gBAAA;IASf,eAAC;AAAD,CARA,AAQC,CARsB,cAAc,GAQpC","file":"actions.js","sourcesContent":["import * as angular from 'angular';\nimport * as _ from 'lodash';\n\nimport {APIService} from './api';\n\n// TODO: - ADD type\n//       - document everyting\nexport let actionsList = [];\n\nexport function registerAction(ActionClass) {\n    const action = new ActionClass();\n    actionsList.push(action);\n}\n\nconst actions = angular.module('pathwayvis.services.actions', []);\n\nexport class ActionsService {\n    private $injector: angular.auto.IInjectorService;\n\n    constructor($injector: angular.auto.IInjectorService) {\n        this.$injector = $injector;\n    }\n\n    public getList(context: {type:string}): Action[] {\n        return _.filter(actionsList, (action) => action.canDisplay(context));\n    }\n\n    public callAction(action, args: Object) {\n        return this.$injector.invoke(action.callback, args);\n    }\n}\n\nactions.service('actions', ActionsService);\n\nabstract class Action {\n    public label: string;\n    public abstract canDisplay(context): boolean;\n    public abstract callback(... args): void;\n}\n\nabstract class ReactionAction extends Action {\n    public canDisplay(context) {\n        return context.type === 'map:reaction';\n    }\n}\n\n@registerAction\nclass Knockout extends ReactionAction {\n    public label = 'Knockout';\n    public object: any;\n\n    // @ngInject\n    public callback(api: APIService): void {\n\n    }\n}\n\n"]}