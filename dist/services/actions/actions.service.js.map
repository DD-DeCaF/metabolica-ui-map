{"version":3,"sources":["services/actions/actions.service.ts"],"names":[],"mappings":"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","file":"actions.service.js","sourcesContent":["import * as angular from 'angular';\nimport * as _ from 'lodash';\n\nimport {WSService} from '../ws';\nimport {Action, ReactionAction} from './base';\n\nimport * as types from '../../types';\n\n/**\n * Creates @registerAction decorator that is used for registering new actions\n */\nexport let actionsList = [];\nexport function registerAction(ActionClass) {\n    const action = new ActionClass();\n    actionsList.push(action);\n}\n\nconst actions = angular.module('pathwayvis.services.actions', []);\n\n/**\n * Actions service provides all registered actions as injectable service.\n */\nexport class ActionsService {\n    private $injector: angular.auto.IInjectorService;\n    private _q: angular.IQService;\n\n    constructor($injector: angular.auto.IInjectorService, $q: angular.IQService) {\n        this.$injector = $injector;\n        this._q = $q;\n    }\n\n    /**\n     * Returns list of all actions filtered by context\n     * @param  {[type]} context Object used to filter actions by\n     * @return {types.Action[]} List of actions\n     */\n    public getList(context): types.Action[] {\n        return _.filter(actionsList, (action: types.Action) => action.canDisplay(context));\n    }\n\n    /**\n     * Returns specific action by given type\n     * @param  {[type]} type used to filter actions by\n     * @return {types.Action} Action\n     */\n    public getAction(type: string): types.Action {\n        return _.first(_.filter(actionsList, (action: types.Action) => action.type === type));\n    }\n\n    /**\n     * Invokes action callback with injected arguments\n     * @param {[type]} action Callback function from action\n     * @param {Object} args Object with arguments that is applied to `this` in action class\n     */\n    public callAction(action: Action, args: Object)  {\n        return this.$injector.invoke(action.callback, args);\n    }\n}\n\nactions.service('actions', ActionsService);\n\n/**\n * Knockout reaction\n */\n@registerAction\nclass Knockout extends ReactionAction implements Action {\n    public ws: WSService;\n    public label = 'Knockout';\n    public type: string = 'reaction:knockout:do';\n    public shared: types.Shared;\n\n    // @ngInject\n    public callback(ws: WSService, $timeout: angular.ITimeoutService): any {\n\n        const data = {\n            'to-return': ['fluxes', 'growth-rate', 'removed-reactions'],\n            'simulation-method': this.shared.method,\n            'reactions-knockout': this.shared.map.removedReactions\n        };\n\n        return $timeout(() => {\n            return ws.send(data).then((data) => {\n                return data;\n            }, (error) => {\n                // TODO: set error\n            });\n        }, 0, false);\n    }\n\n    public canDisplay(context) {\n        const isRemoved = !_.includes(context.shared.map.removedReactions, context.element.bigg_id);\n        return context.type === 'map:reaction' && isRemoved;\n    }\n}\n\n/**\n * Undo knockout reaction\n */\n@registerAction\nclass UndoKnockout extends Knockout {\n    public label = 'Undo knockout';\n    public type: string = 'reaction:knockout:undo';\n\n    public canDisplay(context) {\n        if (context.shared.map.removedReactions) {\n            const isRemoved = _.includes(context.shared.map.removedReactions, context.element.bigg_id);\n            return context.type === 'map:reaction' && isRemoved;\n        }\n\n        return false;\n    }\n}\n"]}