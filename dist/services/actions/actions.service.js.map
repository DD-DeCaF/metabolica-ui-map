{"version":3,"sources":["services/actions/actions.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,IAAY,OAAO,WAAM,SAAS,CAAC,CAAA;AACnC,IAAY,CAAC,WAAM,QAAQ,CAAC,CAAA;AAG5B,qBAAqC,QAAQ,CAAC,CAAA;AAI9C;;GAEG;AACQ,mBAAW,GAAG,EAAE,CAAC;AAC5B,wBAA+B,WAAW;IACtC,IAAM,MAAM,GAAG,IAAI,WAAW,EAAE,CAAC;IACjC,mBAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AAC7B,CAAC;AAHe,sBAAc,iBAG7B,CAAA;AAED,IAAM,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC,6BAA6B,EAAE,EAAE,CAAC,CAAC;AAElE;;GAEG;AACH;IAII,wBAAY,SAAwC,EAAE,EAAqB;QACvE,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;IACjB,CAAC;IAED;;;;OAIG;IACI,gCAAO,GAAd,UAAe,OAAO;QAClB,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,mBAAW,EAAE,UAAC,MAAoB,IAAK,OAAA,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,EAA1B,CAA0B,CAAC,CAAC;IACvF,CAAC;IAED;;;;OAIG;IACI,mCAAU,GAAjB,UAAkB,MAAgB,EAAE,IAAY;QAC5C,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;IACxD,CAAC;IACL,qBAAC;AAAD,CA1BA,AA0BC,IAAA;AA1BY,sBAAc,iBA0B1B,CAAA;AAED,OAAO,CAAC,OAAO,CAAC,SAAS,EAAE,cAAc,CAAC,CAAC;AAE3C;;GAEG;AAEH;IAAuB,4BAAc;IAArC;QAAuB,8BAAc;QAE1B,UAAK,GAAG,UAAU,CAAC;IAgB9B,CAAC;IAbG,YAAY;IACL,2BAAQ,GAAf,UAAgB,EAAa,EAAE,QAAiC;QAC5D,IAAM,IAAI,GAAG;YACT,WAAW,EAAE,CAAC,QAAQ,CAAC;YACvB,oBAAoB,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;SAC9C,CAAA;QAED,MAAM,CAAC,QAAQ,CAAC;YACZ,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,UAAC,IAAI;gBAC3B,MAAM,CAAC,IAAI,CAAC;YAChB,CAAC,CAAC,CAAC;QACP,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC;IACjB,CAAC;IAlBL;QAAC,cAAc;;gBAAA;IAmBf,eAAC;AAAD,CAlBA,AAkBC,CAlBsB,qBAAc,GAkBpC","file":"actions.service.js","sourcesContent":["import * as angular from 'angular';\nimport * as _ from 'lodash';\n\nimport {WSService} from '../ws';\nimport {Action, ReactionAction} from './base';\n\nimport * as types from '../../types';\n\n/**\n * Creates @registerAction decorator that is used for registering new actions\n */\nexport let actionsList = [];\nexport function registerAction(ActionClass) {\n    const action = new ActionClass();\n    actionsList.push(action);\n}\n\nconst actions = angular.module('pathwayvis.services.actions', []);\n\n/**\n * Actions service provides all registered actions as injectable service.\n */\nexport class ActionsService {\n    private $injector: angular.auto.IInjectorService;\n    private _q: angular.IQService;\n\n    constructor($injector: angular.auto.IInjectorService, $q: angular.IQService) {\n        this.$injector = $injector;\n        this._q = $q;\n    }\n\n    /**\n     * Returns list of all actions filtered by context\n     * @param  {[type]} context Object used to filter actions by\n     * @return {types.Action[]} List of actions\n     */\n    public getList(context): types.Action[] {\n        return _.filter(actionsList, (action: types.Action) => action.canDisplay(context));\n    }\n\n    /**\n     * Invokes action callback with injected arguments\n     * @param {[type]} action Callback function from action\n     * @param {Object} args Object with arguments that is applied to `this` in action class\n     */\n    public callAction(action: Knockout, args: Object)  {\n        return this.$injector.invoke(action.callback, args);\n    }\n}\n\nactions.service('actions', ActionsService);\n\n/**\n * Knockout reaction\n */\n@registerAction\nclass Knockout extends ReactionAction {\n    public ws: WSService;\n    public label = 'Knockout';\n    public object: any;\n\n    // @ngInject\n    public callback(ws: WSService, $timeout: angular.ITimeoutService): any {\n        const data = {\n            'to-return': ['fluxes'],\n            'reactions-knockout': [this.object.bigg_id]\n        }\n\n        return $timeout(() => {\n            return ws.send(data).then((data) => {\n                return data;\n            });\n        }, 0, false);\n    }\n}\n\n"]}